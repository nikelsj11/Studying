#TITLE:Работа с освещением в Unity — теория и практика

      В видеоиграх красивое освещение в реальном времени сильно бьёт по производительности, что особенно заметно на мобильных устройствах. Таким образом, разработчики вынуждены искать методы обхода этой проблемы. Lightmapping — технология, сохраняющая информацию об освещении в текстуру, что позволяет высвободить вычислительные ресурсы под другие нужды. 
В этой статье я познакомлю читателя с теорией освещения в играх, опишу процесс создания “лайтмапа” в Unity 5 и поделюсь рядом советов.
В течение последних пары лет мне приходилось много работать с “лайтмаппингом” как по работе, так и на своём собственном инди-проекте. Когда у вашей команды мало производственных ресурсов и вы не можете выделить много времени на создание уникальной графики для игровых локаций, освещение становится одним из ключевых факторов, помогающих оживить и разнообразить картинку.Теория освещенияОтражённый свет
Давайте определимся с терминологией. Освещение в компьютерной графике делится, условно говоря, на две категории:Direct Illumination. Прямое попадание лучей света на поверхность.
Indirect Illumination. Лучи отражаются от поверхности, рассеиваются и образуют мягкий заполняющий свет.

Есть много методов вычисления отражённого освещения, два самых известных — это Global Illumination (GI) и Final Gather (FG). Их можно использовать по отдельности, но вместе они выдают особенно хороший результат. Однако за всё приходится платить: рендер, то есть процесс вычисления сложного освещения и последующей его визуализации, займёт уйму времени.Global Illumination (GI) представляет из себя наиболее “честный” способ симуляции отражённого света. Из источника света вылетают фотоны — частички, несущие информацию о цвете и яркости света. Ударяясь о какую-либо поверхность, они освещают её, но теряют часть энергии, вследствие чего их цвет и яркость изменяются. Затем фотоны отскакивают и ударяются о следующую поверхность, повторно теряя часть энергии. Так происходит несколько раз в зависимости от настроек рендерера.Final Gather (FG) раскидывает по сцене точки, — final gather points, — из которых в разные стороны вылетают лучи. После столкновения с какой-либо поверхностью, лучи возвращают в родительскую точку информацию о цвете и его яркости. Представьте себе такую картину: вечер, солнце почти зашло за горизонт; становится темно, но небольшая часть комнаты ещё залита оранжевым закатным светом. Находящаяся на полу final gather point отправляет в разные стороны несколько лучей, некоторые из них дотягиваются до освещённой части комнаты и с этой информацией возвращаются в исходную точку, тем самым слегка освещая пол «отражённым» оранжевым светом. Это не такой “честный” способ, как GI, но он производит хороший результат, и им часто пользуются, чтобы заполнять сцены красивым мягким освещением.
Для следующей картинки я выкрутил параметры отражённого света до безумных значений, таким образом вы можете наглядно увидеть, как частички света отскакивают от объектов.Ambient Occlusion
Кроме отражённого света, нам интересен так называемый Ambient Occlusion (AO). Это эффект затенения в углах, трещинах, узких проёмах. Представьте, что луч света залетает в угол комнаты, он несколько раз отражается от обеих стен, постепенно затухая. Чем дальше в угол, тем меньше света туда доходит.
Как правило, Ambient Occlusion используется, чтобы художественно подчеркнуть эффект затенения, — в реальности лучи света не теряют энергию столь быстро, чтобы в углах комнаты сгущалась такая же тьма, как показывают нам в играх. Если вы рендерите физически корректное освещение, ваш движок сам высчитывает скорость потери энергии лучом света, и вам не нужно отдельно рендерить карту (текстуру) Ambient Occlusion. Но вы можете это сделать, если потребуется для реализации художественного замысла.
К слову пришлось: некоторые цифровые 2d-художники любят имитировать этот эффект во время рисования, и в целом процесс их работы очень похож на то, как создают 3d-графику.Текстурные атласы
Следующим термином, который вам следует следует знать, является текстурный атлас. Грубо говоря, это одна большая текстура, в которой содержатся несколько маленьких текстурок. Чаще всего текстурные атласы создаются для экономии вычислительных ресурсов. Приведу крайне упрощённый пример, — спецы, спрячьте факелы и вилы! Пусть у вас в игре есть таверна, в которой 20 деревянных предметов (столы, стулья, ложки...), у каждого своя текстура. В итоге CPU будет 20 раз обращаться к GPU, требуя отрендерить каждый объект по отдельности. Если мы назначим всем деревянным объектам один материал, обращающийся к одному текстурному атласу, в который зашиты все 20 текстур, то GPU сможет отрендерить 20 объектов за один вызов (он же — draw call, в конце статьи предоставлю интересные ссылки по этой теме).
В случае с “лайтмаппингом”, для каждого объекта создаётся дополнительная маленькая текстурка, в которой “запекается” информация об освещении. Затем много-много маленьких текстурок разных объектов размещаются в крупных текстурных атласах. Как и в случае с деревянной мебелью, мы также получаем прирост производительности.Работа с UnityОбщая информация
Но вернёмся к “лайтмаппингу” в самом Unity. Прежде всего запаситесь терпением и, по возможности, мощным компьютером. Процесс рендера имеет свойство полностью занимать процессор и оперативную память, поэтому я включаю его перед тем, как ухожу на работу или иду спать. Таким образом, я возвращаюсь к компьютеру как раз в тот момент, когда рендер уже завершён.
Забегая вперёд, предупрежу, что Unity кэширует промежуточные результаты вычислений освещения. Если вы увидите, что на системном диске у вас пропало 10 гигабайт места — это оно. Чтобы настроить кэш надо зайти в: Edit — Preferences — GI Cache. Здесь вы можете указать, куда он сохраняется и его максимальный размер. Можно убрать компрессию, “весить” будет больше, но работать пошустрее. Тут же вы можете почистить кэш, но имейте ввиду, что если у вас открыта сцена с готовым “лайтмапом”, то он тоже будет удалён, будьте внимательны.
В Unity доступно 5 типов источников света:Directional Light. Самый простой, имитирует солнечный свет. Представляет из себя бесконечное множество параллельных друг другу лучей.
Point Light. Точечный источник света, то есть лучи расходятся во все стороны из одной точки. Хорошим примером такого источника света будет обычная лампочка.
Area Light. Источник света, имеющий площадь. Представьте себе прямоугольную панель, из которой исходит свет, это и будет area light. Такие источники света чаще всего используются в офисах, торговых центрах и других нежилых помещениях, где надо освещать большие пространства.
Ambient Light. Заполняющий свет, не имеющий источника. Примеры использования: осветить слишком тёмные тени; добавить атмосферности подземелью, заполнив его едва заметным светом биолюминисцентных растений.
Light Probes. Особый источник света, влияющий исключительно на динамические объекты. Технически это не источник света, но для простоты назовём его так.

В Unity все объекты делятся на динамические (dynamic) и статические (static). Статическими объектами называются те, которые всегда стоят на месте и никуда не смещаются. Именно для них происходит “запечение” освещения. Динамические объекты — это те, которые наоборот находятся в движении. Сюда входят такие элементы сцены, как герой, монстр, колышущийся флаг, падающий с обрыва камень. Для этих объектов не подходит “лайтмаппинг”, они освещаются либо real-time источниками света, либо посредством light probes, о которых я дополнительно расскажу в конце статьи.Параметры источников света
Хочу обратить внимание на насколько ключевых настроек источников света (доступные настройки различаются в зависимости от типа источника света):Baking. Позволяет выбрать метод обработки источника света. Для “лайтмаппинга” ставим в положение Baked.
Color. Собственно, цвет источника света. 
Radius. Параметр Point Light’а, отвечающий за то, как далеко летят лучи света.
Intensity. Просто яркость источника света.
Bounce Intensity. Определяет яркость отражённых лучей, выпущенных из текущего источника света.
Shadow Type. Определяет отображение теней. Советую использовать Soft Shadows, это даёт красивые тени ценой увеличенного времени рендера.
Baked Shadow Angle. Доступно только для Soft Shadows. Представьте себе длинную тень. Чем дальше она уходит от объекта, отбрасывающего её, тем более размытой она становится. Если параметр выставлен на “0”, то тень практически не будет размываться. Если выставлен на больше, чем “0”, то появится размытие.
Настройка освещения сцены
Окно настроек освещения сцены вызывается через Window — Lighting, и состоит из трёх вкладок: Object, Scene, Lightmaps. Для запуска рендера освещения используется кнопка Build в самом низу окна. Там же есть галочка Auto, которая автоматически запускает рендер каждый раз, когда вы вносите изменения в сцену; используйте её, если у вас мощный компьютер. Ещё ниже находится информация о количестве и размере “лайтмапов”, появится по завершению процесса “лайтмаппинга”.Раздел — Object
В Object отображаются настройки конкретного объекта. Если вы выделите элемент окружения на вашей сцене, то здесь увидите ряд настроек и параметров. При условии, что объект является статичным, будет стоять галочка на чекбоксе Lightmap Static. Чаще всего вы будете использовать здесь поле Scale in Lightmap. Как я говорил ранее, для каждого объекта освещение “запекается” в отдельную маленькую текстурку, которая потом размещается в крупном “лайтмап”-атласе. Параметром Scale in Lightmap вы можете регулировать, сколько места будет занимать эта текстурка. Разумеется, чем меньше места ей выделяется, тем хуже будет качество “запечённого” в неё освещения. По умолчанию здесь стоит “1”, но если вы знаете, что объект будет редко попадать в поле зрения или он расположен далеко на фоне, вы можете смело уменьшить этот параметр вплоть до 0.1 или даже меньше.Раздел — Scene
В Scene расположены ключевые настройки рендера освещения. Я рассказываю основы работы со светом, а также делюсь опытом “лайтмаппинга” конкретно под мобильные платформы, поэтому умышленно пропускаю такие вещи, как realtime GI или использование HDR-текстуры в качестве источника света. 
В Ambient Source вы настраиваете заполняющий источник света Ambient Light, который я уже упоминал. Вам предлагается выбрать между небом-текстурой, небом из единственного цвета, а также созданным на основе цветового градиента небом. Я предпочитаю выбирать Gradient. Он позволяет настроить три цвета — купол неба, экватор и землю, что создаст для вашей сцены достаточно сложный и интересный заполняющий свет. Ambient Intensity указывает яркость этого света. В зависимости от художественного замысла, вы можете иметь даже очень светлую сцену, освещённую посредством одного Ambient Light.
Во вкладке Baked GI находятся основные настройки качества освещения, как прямого, так и отражённого, включая и GI, и FG.
Прежде чем углубимся в эти настройки, хочу дать один совет. Всегда имейте ввиду, что размещая на сцене источники света, настраивая тени и Ambient Light, после рендера “лайтмапа” вы получите совершенно иную картинку, только отдалённо напоминающую то, что вы делали. Поэтому я рекомендую работать итерациями: вы выставляете минимальное качество освещения, чтобы рендер происходил быстро, смотрите на результат рендера, после чего вносите правки и запускаете повторный рендер. Когда вы более-менее довольны результатом, можно повысить качество рендера и включить Final Gather. Это займёт длительное время, поэтому есть смысл включать такой рендер перед тем, как вы отходите от компьютера на сравнительно долгий отрезок времени.
Настройки во вкладке Baked GI оперируют такой единицей, как texel. Если говорить упрощённо, тексель — это пиксель, но не на экране, а в текстурном пространстве трёхмерной модели. Но не забивайте голову, — трудно сказать, как Unity оперирует текселями и как они зависят от масштаба объектов, поэтому просто-напросто двигайтесь эксперементальным путём. Например, для своей мобильной RPG я делаю финальный рандер с Baked Resolution выставленным в 25.Texel в ВикипедииТексель (сокращение от англ. Texture element) — минимальная единица текстуры трёхмерного объекта. Пиксель текстуры.
Проще всего объяснить значение термина «тексель» на примере трёхмерных игр. Если подойти вплотную к стене в какой-нибудь старой 3D-игре — (Wolfenstein или Duke Nukem), то можно наблюдать, как текстура стены распадается на однотонные квадраты, которые увеличиваются при приближении и собираются обратно в осмысленный рисунок при отдалении. Эти квадраты и называются текселями, и чем крупнее исходный рисунок текстуры, тем меньше становятся тексели. Для идеального отображения текстуры количество текселей должно совпадать с количеством пикселей на мониторе, но практически все движки разрешают зрителю приблизиться к стене ближе чем того разрешает детальность.Источник.
Ниже я расскажу про каждый параметр отдельно, но перед этим вам нужно знать ещё кое-что. Если вы запустите в Unity рендер освещения, то справа снизу будет написано, чем именно движок занят в текущий момент. В самом конце процесса рендера там будет написано Compositing.
Дело в том, что “лайтмап” генерируется послойно. Во время рендера создаются несколько отдельных текстур. Мне неизвестно, какие именно карты делает Unity, но среди них есть либо все, либо часть из списка: Diffuse (прямой свет), GI (Global Illumination), FG (Final Gather), AO (Ambient Occlusion) и другие. После этого движок берёт эти карты и сливает друг с другом. Например, в основе может лежать слой Diffuse, над ним кладётся слой FG в режиме смешивания Lighten (прямо как в Photoshop’е), а повыше кладётся слой AO в режиме Multiply… В итоге эти слои сливаются в одну картинку и на выходе получается финальный “лайтмап”.Вкладка — Baked GIBaked Resolution. Этот параметр можно считать общим качеством “лайтмапа”, он же — Diffuse, о чём я говорил в прошлом абзаце. Чем выше вы его ставите, тем чётче будет картинка. Но сильно не увлекайтесь, есть определённый лимит, после которого вы не заметите никакой разницы. Вообще тут важно искать баланс между качеством “запечки” и временем рендера.
Baked Padding. Расстояние между отдельными текстурками на общем атласе. Нужно для того, чтобы при компрессии, когда атлас начинает “плыть”, цвет одной отдельной текстурки не заляпал другую текстурку. Для своей игры я обычно ставлю в пределах 1-3.
Compressed. Практически всегда у вас здесь будет выставлена галочка, при этом Unity будет сжимать “лайтмап”-атласы. В несжатом состоянии они “весят” неприлично много.
Indirect Resolution. Этот параметр можно считать качеством, или детализацией, слоёв GI, FG и, возможно, AO. Нет смысла здесь ставить большое число, разницы вы не увидите. Например, если в Baked Resolution вы поставите 40, то в Indirect можно спокойно поставить в районе 3-8.
Ambient Occlusion. Как я уже писал в самом начале статьи, AO — это затенение в разного рода углах и трещинах вследствие потери энергии лучом света. Этот параметр настраивает, насколько быстро теряется энергия. Чем выше параметр, тем темнее будет AO. Напомню, что АО — это художественный приём, на самом деле не имеющий ничего общего с физически корректным освещением.
Max Distance. По большому счёту, это просто дистанция затемнения для Ambient Occlusion. Если взять в пример угол комнаты, то при высоком Max Distance затемнение будет начинаться очень рано, а при низком Max Distance затемнение будет только в самой-самой глубине угла.
Final Gather. Включает описанный в начале статьи метод отражённого света. По умолчанию рендерится только GI, здесь же вы включаете и FG. Нигде нет настроек количества точек, которое FG раскидывает по сцене. Предполагаю, что это так или иначе зависит от Indirect Resolution.
Ray Count. Количество лучей, которые испускает каждая точка FG. Скорее всего, вам за глаза будет хватать 32 или 64 луча.
Вкладка — General GI
Давайте пройдёмся по интересующим нас настройкам во вкладке General GI:Directional Mode. Весьма специфичный параметр, “запекающий” для каждого “лайтмапа” второй атлас. Обычный “лайтмап” представляет из себя простую текстуру, которая затем накладывается поверх ваших объектов, имитируя их освещённость. Второй же атлас, называемый Directional, содержит в себе информацию о направлении движения лучей света. Этот режим имеет смысл включать только если вы используете normal map’ы и работаете не над мобильной игрой. В противном случае рекомендуется брать Non Directional.
Indirect Intensity. Можно сказать, что это яркость слоёв с непрямым светом, в частности FG. Ранее я уже рассказывал, что на самом деле “лайтмап” собирается из слоёв, накладываемых поверх друг дружки.
Bounce Boost. Настраивает яркость отражённых фотонов, информация о которых содержится в слое с GI.
Atlas Size. Тут указывается размер текстурных атласов с “запечённым” освещением. Если вы делаете игру для мобильных устройств прямиком из 19-го века, то есть смысл выставлять здесь 1024, так как текстуры размером в 2048 не поддерживаются очень старыми устройствами. В противном случае я рекомендую ставить 2048, его поддерживают практически все устройства последних лет. Как вы понимаете, чем меньше размер одного атласа, тем больше придётся их делать. Если вы знакомы с термином Draw Call, то вам не составит труда предугадать, что увеличение количества атласов нанесёт удар по производительности. Поэтому если у вас нет специфичных требований, старайтесь рендерить в 2048.
Вкладка — Fog
И, наконец, туман! Fog, то бишь. К рендеру освещения он не имеет никакого отношения, может включаться и выключаться в любое время. Тут всё предельно просто, поэтому берите и экспериментируйте. Скажу лишь, что туман является крайне мощным художественным средством. Вы можете радикально изменять атмосферу сцены посредством тумана, благодаря ему солнечная сцена станет ярче, мрачная — мрачнее.
Кроме того, туман может использоваться как инструмент повышения производительности. Например, вы хотите вдалеке выключить у всех объектов текстуры и скрыть их за туманом. В более старых версиях World of Warcraft, если вы играли, вы не могли не заметить, какой густой там был туман.Раздел — Lightmaps
Третьим разделом является Lightmaps, где будут расположены отрендеренные “лайтмапы”. Причем если атласов много, в верхней части вкладки вы не сможете увидеть все атласы, скролл в том окошке неактивен. Поэтому смотрим в нижнее и прокручиваем колесиком мышки.
Здесь нам важно увидеть насколько заполнен последний, самый нижний “лайтмап”-атлас. Если он почти пуст, то либо увеличиваем качество “лайтмапа”, чтобы заполнить весь атлас, либо уменьшаем, чтобы атлас оказался пустым и был удален. На картинке ниже изображены два хорошо заполненных атласа, а один — постольку-поскольку.
“Лайтмапы” хранятся в файлах EXR с глубиной в 32 бита.Light Probes
Ещё я обещал рассказать про Light Probes. Они представляют из себя небольшие сферы, вбирающие в себя информацию об освещении окружающего пространства. Когда таких сфер много, они создают своебразную карту освещённости вашего уровня или локации. Затем они используются для освещения динамических объектов, в которые не “запекается” свет.
Чтобы лучше понять их смысл, дам пример. На вашей сцене находится один Point Light, у которого стоят настройки Baked, то есть он используется для “запечения” света. Вы не делаете его Real-time, потому что это дорого в плане производительности, причём многие мобильные устройства вообще не поддерживают такой источник света. Далее вы “лайтмапите” сцену и видите, что ваш Point Light освещает окружение. Но если вы возьмёте монстра и поставите рядом с источником света, он останется тёмным, потому что принадлежит к классу динамических объектов, а ваш Point Light влияет только на статические.
Теперь вы расставляете вокруг источника света сетку из Light Probes, снова запекаете освещение. И теперь ваш монстр может ходить вокруг Point Light’а и освещаться им! Это крайне эффективный и недорогой способ имитации освещения. Чтобы добавить “пробы” на сцену, заходите в Game Object — Light — Light Probe Group. На сцене появится кубик из четырёх сфер. Для выбора отдельных сфер, используйте ctrl + click. В Inspector появятся несколько кнопок, позволяющие добавлять или удалять сферы. Вы также можете использовать комбинацию ctrl + D для дублирования сфер. 
Расставляйте Light Probes аккуратно, размещайте их там, где вы хотите, чтобы они вбирали в себя информацию об освещении, чтобы потом передавать её динамическим объектам. Во избежание графических артефактов и мерцающего света, следите за тем, чтобы Light Probes образовывали ровную, красивую сетку.
Ниже скриншот корректно выставленной сетки. Если приглядеться, можно заметить, что Light Probes выставлены не в случайном порядке, а окружают источники света, стремясь эффективно поймать переход от света к тени и обратно.Заключение
Напоследок хочу дать совет по созданию моделей окружения под “лайтмаппинг”. Создавая контент для игры, я знал, с какой стороны будет смотреть игровая камера, поэтому ради сомнительной оптимизации удалял задние стенки некоторых объектов. В то время у меня был опыт рендера “лайтмапов”, но только в Maya, а не в Unity. Выяснилось, что при рендере освещения в Unity возле объектов, имеющих дыры, то есть удалённые полигоны, появляются жесткие, хорошо заметные артефакты. Имейте ввиду.Полезные и интересные ссылкиОбъяснение системы физически корректного освещения и рендера, написанное для 3d-художников.
Если вы хотите узнать больше про draw call'ы и оптимизацию графики, то есть отличный материал, ориентированный на непрограммистов — render hell 2.0.
На сайте Unity есть хорошее описание их системы освещения, местами перекликается с моим материалом.
В этой небольшой заметке на примере Diablo III демонстрируется, как разработчик ААА игр пользуется тем же приёмом — существенно изменяет атмосферу уровней одним освещением, не меняя графику окружения.

    