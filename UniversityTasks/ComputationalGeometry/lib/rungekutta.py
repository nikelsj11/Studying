# -*- coding: utf-8 -*-
import numpy as np


class RK(object):
    _butcher_tables = {
        'RKp2n1': {
            'name': "Метод Рунге-Кутты p=2, s=2 I",
            'method stage': 2,
            'method order': 2,
            'a': np.array([[0.0, 0.0], [1.0, 0.0]]),
            'b': np.array([0.5, 0.5]),
            'c': np.array([0.0, 1.0])},
        'RKp2n2': {
            'name': "Метод Рунге-Кутты p=2, s=2 II",
            'method stage': 2,
            'method order': 2,
            'a': np.array([[0.0, 0.0], [0.5, 0.0]]),
            'b': np.array([0.0, 1.0]),
            'c': np.array([0.0, 0.5])},
        # ---------------------------------------------------------------------
        'RKp3n1': {
            'name': "Метод Рунге--Кутты 3-го порядка I",
            'method stage': 3,
            'method order': 3,
            'a': np.array([[0.0, 0.0, 0.0],
                           [2.0/3.0, 0.0, 0.0],
                           [1.0/3.0, 1.0/3.0, 0.0]]),
            'b': np.array([0.25, 0.0, 0.75]),
            'c': np.array([0.0, 2.0/3.0, 2.0/3.0])},
        'RKp3n2': {
            'name': "Метод Рунге--Кутты 3-го порядка II",
            'method stage': 3,
            'method order': 3,
            'a': np.array([[0.0, 0.0, 0.0],
                           [0.5, 0.0, 0.0],
                           [-1.0, 2.0, 0.0]]),
            'b': np.array([1.0/6.0, 4.0/6.0, 1.0/6.0]),
            'c': np.array([0.0, 1.0/3.0, 2.0/3.0])},
        'RKp3n3': {
            'name': "Метод Рунге--Кутты 3-го порядка III (Хойна)",
            'method stage': 3,
            'method order': 3,
            'a': np.array([[0.0, 0.0, 0.0],
                           [1.0/3.0, 0.0, 0.0],
                           [0.0, 2.0/3.0, 0.0]]),
            'b': np.array([0.25, 0.0, 0.75]),
            'c': np.array([0.0, 1.0/3.0, 2.0/3.0])},
        # ---------------------------------------------------------------------
        'RKp4n1': {
            'name': "Метод Рунге--Кутты 4-го порядка I",
            'method stage': 4,
            'method order': 4,
            'a': np.array([[0.0, 0.0, 0.0, 0.0],
                           [1.0/2.0, 0.0, 0.0, 0.0],
                           [0.0, 1.0/2.0, 0.0, 0.0],
                           [0.0, 0.0, 1.0, 0.0]]),
            'b': np.array([1.0/6.0, 1.0/3.0, 1.0/3.0, 1.0/6.0]),
            'c': np.array([0.0, 1.0/2.0, 1.0/2.0, 1.0])},
        'RKp4n2': {
            'name': "Метод Рунге--Кутты 4-го порядка II",
            'method stage': 4,
            'method order': 4,
            'a': np.array([[0.0, 0.0, 0.0, 0.0],
                           [1.0/4.0, 0.0, 0.0, 0.0],
                           [0.0, 1.0/2.0, 0.0, 0.0],
                           [1.0, -2.0, 2.0, 0.0]]),
            'b': np.array([1.0/6.0, 0.0, 2.0/3.0, 1.0/6.0]),
            'c': np.array([0.0, 0.25, 0.5, 1.0])},
        'RKp4n3': {
            'name': "Метод Рунге--Кутты 4-го порядка III (правило 3/8)",
            'method stage': 4,
            'method order': 4,
            'a': np.array([[0.0, 0.0, 0.0, 0.0],
                           [1.0/3.0, 0.0, 0.0, 0.0],
                           [-1.0/3.0, 1.0, 0.0, 0.0],
                           [1.0, -1.0, 1.0, 0.0]]),
            'b': np.array([1.0/8.0, 3.0/8.0, 3.0/8.0, 1.0/8.0]),
            'c': np.array([0.0, 1.0/3.0, 2.0/3.0, 1.0])},
        # ---------------------------------------------------------------------
        'RKp5n1': {
            'name': "Метод Рунге-Кутты 5-го порядка (Кутта(1901)-Нюстрем(1925))",
            'method stage': 6,
            'method order': 5,
            'a': np.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [1.0/3.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [4.0/25.0, 6.0/25.0, 0.0, 0.0, 0.0, 0.0],
                           [1.0/4.0, -3.0, 15.0/4.0, 0.0, 0.0, 0.0],
                           [6.0/81.0, 90.0/81.0, -50.0/81.0, 8.0/81.0, 0.0, 0.0],
                           [6.0/75.0, 36.0/75.0, 10.0/75.0, 8.0/75.0, 0.0, 0.0]]),
            'b': np.array([23.0/192.0, 0.0, 125.0/192.0, 0.0, -81.0/192.0, 125.0/192.0]),
            'c': np.array([0.0, 1.0/3.0, 2.0/5.0, 1.0, 2.0/3.0, 4.0/5.0])},
        'RKp5n2': {
            'name': "Метод Рунге-Кутты 5-го порядка Dormand/Prince (1980)",
            'method stage': 7,
            'method order': 5,
            'a': np.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [1.0/5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [3.0/40.0, 9.0/40.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [44.0/45.0, -56.0/15.0, 32.0/9.0, 0.0, 0.0, 0.0, 0.0],
                           [19372.0/6561.0, -25360.0/2187.0, 64448.0/6561.0, -212.0/729.0, 0.0, 0.0, 0.0],
                           [9017.0/3168.0, -355.0/33.0, 46732.0/5247.0, 49.0/176.0, -5103.0/18656.0, 0.0, 0.0],
                           [35.0/384.0, 0.0, 500.0/1113.0, 125.0/192.0, -2187.0/6784.0, 11.0/84.0, 0.0]]),
            'b': np.array([35.0/384.0, 0.0, 500.0/1113.0, 125.0/192.0, -2187.0/6784.0, 11.0/84.0, 0.0]),
            'c': np.array([0.0, 1.0/5.0, 3.0/10.0, 4.0/5.0, 8.0/9.0, 1.0, 1.0])},
        # ---------------------------------------------------------------------
        'RKp6n1': {
            'name': "Метод Рунге-Кутты 6-го порядка Бутчер (1980)",
            'method stage': 7,
            'method order': 6,
            'a': np.array([[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [2.0/9.0, 4.0/9.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                           [7.0/36.0, 2.0/9.0, -1.0/12.0, 0.0, 0.0, 0.0, 0.0],
                           [-35.0/144.0, -55.0/36.0, 35.0/48.0, 15.0/8.0, 0.0, 0.0, 0.0],
                           [-1.0/360.0, -11.0/36.0, -1.0/8.0, 0.5, 0.1, 0.0, 0.0],
                           [-41.0/260.0, 22.0/13.0, 43.0/156.0, -118.0/39.0, 32.0/195.0, 80.0/39.0, 0.0]]),
            'b': np.array([13.0/200.0, 0.0, 11.0/40.0, 11.0/40.0, 4.0/25.0, 4.0/25.0, 13.0/200.0]),
            'c': np.array([0.0, 0.5, 2.0/3.0, 1.0/3.0, 5.0/6.0, 1.0/6.0, 1.0])}
        }
    def __init__(self, equation_number, method_name='RKp4n3'):
        """В конструкторе инициализируем коэффициенты метода"""
        self.method_name = method_name
        try:
            self._butcher_table = RK._butcher_tables[self.method_name]
        except KeyError:
            print("No {0} method, using RKp4n3".format(self.method_name))
            self._butcher_table = RK._butcher_tables['RKp4n3']

        self.eqn = int(equation_number)
        self.name = self._butcher_table['name']
        self.s = self._butcher_table['method stage']
        self.p = self._butcher_table['method order']
        self.a = self._butcher_table['a']
        self.b = self._butcher_table['b']
        self.c = self._butcher_table['c']

    def __method_step(self, func, x, t_0, func_params, h):
        """Один шаг метода Рунге-Кутты (для внутреннего использования)"""
        k = np.zeros(shape=(self.eqn, self.s))
        g = np.zeros(self.eqn)
        for i in range(self.s):
            g = x + h*np.tensordot(k, self.a[i, :], axes=(-1, 0))
            k[:, i] = func(t_0 + h*self.c[i], g, func_params)
        return x + h*np.tensordot(k, self.b, axes=(-1, 0))

    def integrate(self, func, x_0, time_interval=(0.0, 10.0), h=0.1, func_params=(0.0,)):
        """Численное интегрирование с помощью заданного метода Рунге-Кутты.
        func(t, x, p) --- правая часть ОДУ dx(t)/dt = func(t,x,p),
        func_params --- дополнительные параметры функции (p),
        x_0 --- начальное значение x(t_o),
        time_interval --- отрезок интегрования [t_0, T],
        h --- шаг метода.
        """
        T = np.arange(time_interval[0], time_interval[1] + h, h)
        x_tmp = x_0
        x = []
        for t in T:
            x.append(x_tmp)
            x_tmp = self.__method_step(func, x_tmp, t, func_params, h)
        return (T, np.array(x).T)







































